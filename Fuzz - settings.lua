function msg(m)
  return reaper.ShowConsoleMsg(tostring(m) .. "\n")
end

-- GUI stuff generated by Lokasenna's GUI Builder

local lib_path = reaper.GetExtState("Lokasenna_GUI", "lib_path_v2")
if not lib_path or lib_path == "" then
  reaper.MB(
    "Couldn't load the Lokasenna_GUI library. Please install 'Lokasenna's GUI library v2 for Lua', available on ReaPack, then run the 'Set Lokasenna_GUI v2 library path.lua' script in your Action List.",
    "Whoops!",
    0
  )
  return
end
loadfile(lib_path .. "Core.lua")()

GUI.req("Classes/Class - Label.lua")()
GUI.req("Classes/Class - Textbox.lua")()
GUI.req("Classes/Class - Button.lua")()
-- If any of the requested libraries weren't found, abort the script.
if missing_lib then
  return 0
end

-- HiDPI Scaling
local retval, layoutValue = reaper.ThemeLayout_GetLayout("mcp", -3)
local guiScale = layoutValue / 256
local elementWidth = math.floor(800 * guiScale)
local textHeight = math.floor(23 * guiScale)
local padding = math.floor(33 * guiScale)
local halfPadding = math.floor(padding / 2)

GUI.name = "Fuzz - Settings"
GUI.x, GUI.y = 0, 0
GUI.w = padding + elementWidth + padding
GUI.h =
  padding + textHeight + halfPadding + textHeight + halfPadding + textHeight + halfPadding + textHeight + halfPadding +
  textHeight +
  padding
GUI.anchor, GUI.corner = "screen", "C"

local monoFont
local osName = reaper.GetOS()
if osName:match("Win") then
  monoFont = "Consolas"
elseif osName:match("OSX") then
  monoFont = "Andale Mono"
else
  monoFont = "DejaVuSansMono"
end

GUI.fonts[3] = {monoFont, textHeight}

GUI.New(
  "plugins",
  "Textbox",
  {
    z = 11,
    x = padding,
    y = padding + textHeight + halfPadding,
    w = textHeight * 2,
    h = textHeight,
    caption = " Plugins",
    cap_pos = "right",
    font_a = 3,
    font_b = 3,
    color = "txt",
    bg = "wnd_bg",
    shadow = false,
    pad = 4,
    undo_limit = 20
  }
)

GUI.New(
  "Label1",
  "Label",
  {
    z = 11,
    x = padding,
    y = padding,
    caption = "Set symbols for Fuzz's different modes (single character only): ",
    font = 3,
    color = "txt",
    bg = "wnd_bg",
    shadow = false
  }
)

GUI.New(
  "tracks",
  "Textbox",
  {
    z = 11,
    x = padding,
    y = padding + textHeight + halfPadding + textHeight + halfPadding + textHeight + halfPadding,
    w = textHeight * 2,
    h = textHeight,
    caption = " Tracks",
    cap_pos = "right",
    font_a = 3,
    font_b = 3,
    color = "txt",
    bg = "wnd_bg",
    shadow = false,
    pad = 4,
    undo_limit = 20
  }
)

GUI.New(
  "markers",
  "Textbox",
  {
    z = 11,
    x = padding,
    y = padding + textHeight + halfPadding + textHeight + halfPadding,
    w = textHeight * 2,
    h = textHeight,
    caption = " Markers",
    cap_pos = "right",
    font_a = 3,
    font_b = 3,
    color = "txt",
    bg = "wnd_bg",
    shadow = false,
    pad = 4,
    undo_limit = 20
  }
)

GUI.New(
  "save",
  "Button",
  {
    z = 11,
    x = padding,
    y = padding + textHeight + halfPadding + textHeight + halfPadding + textHeight + halfPadding + textHeight + padding,
    w = textHeight * 5,
    h = textHeight,
    caption = "save",
    font = 3,
    col_txt = "txt",
    col_fill = "elm_frame"
  }
)

modeSymbols = {
  -- defaults
  plugins = "$",
  markers = "@",
  tracks = ">"
}

if reaper.HasExtState("Fuzz Settings", "plugins symbol") then
  modeSymbols["plugins"] = reaper.GetExtState("Fuzz Settings", "plugins symbol")
end
if reaper.HasExtState("Fuzz Settings", "markers symbol") then
  modeSymbols["markers"] = reaper.GetExtState("Fuzz Settings", "markers symbol")
end
if reaper.HasExtState("Fuzz Settings", "tracks symbol") then
  modeSymbols["tracks"] = reaper.GetExtState("Fuzz Settings", "tracks symbol")
end

GUI.Val("plugins", modeSymbols["plugins"])
GUI.Val("markers", modeSymbols["markers"])
GUI.Val("tracks", modeSymbols["tracks"])

GUI.elms.save.func = function()
  local modes = {"plugins", "markers", "tracks"}
  for i, mode in ipairs(modes) do
    local val = GUI.Val(mode)
    
    -- validate
    if #val ~= 1 then
      msg("Symbol must be single character: " .. mode)
      break
    end

    reaper.SetExtState("Fuzz Settings", mode .. " symbol", val, true)
  end
  gfx.quit()
end

GUI.Init()
GUI.Main()
